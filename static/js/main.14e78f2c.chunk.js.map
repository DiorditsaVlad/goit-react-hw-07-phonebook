{"version":3,"sources":["redux/phonebook/phonebook-actions.js","redux/phonebook/phonebook-reducer.js","redux/store.js","redux/phonebook/phonebook-selectors.js","redux/phonebook/phonebook-operations.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js"],"names":["fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","items","createReducer","_","payload","state","filter","id","loading","error","combineReducers","store","configureStore","reducer","contacts","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","devTools","process","getFilter","getAllContacts","getVisibleContacts","createSelector","allContacts","normalizedFilter","toLowerCase","contact","name","includes","axios","defaults","baseURL","ContactForm","useState","setName","number","setNumber","useSelector","dispatch","useDispatch","handleChange","e","currentTarget","value","reset","className","onSubmit","preventDefault","text","nameInContact","trim","find","cont","alert","a","post","data","htmlFor","type","pattern","title","required","onChange","connect","handleClick","contactId","delete","fetchContacts","get","useEffect","map","onClick","target","App","console","log","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.14e78f2c.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\n\nconst fetchContactRequest = createAction('contacts/fetchContactRequest');\nconst fetchContactSuccess = createAction('contacts/fetchContactSuccess');\nconst fetchContactError = createAction('contacts/fetchContactError');\n\nconst addContactRequest = createAction('contacts/addContactRequest');\nconst addContactSuccess = createAction('contacts/addContactSuccess');\nconst addContactError = createAction('contacts/addContactError');\n\nconst deleteContactRequest = createAction('contacts/deleteContactRequest');\nconst deleteContactSuccess = createAction('contacts/deleteContactSuccess');\nconst deleteContactError = createAction('contacts/deleteContactError');\n\nconst changeFilter = createAction('contacts/changeFilter');\n\nexport {\n  fetchContactRequest,\n  fetchContactSuccess,\n  fetchContactError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  changeFilter,\n};\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n  fetchContactRequest,\n  fetchContactSuccess,\n  fetchContactError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  changeFilter,\n} from '../phonebook/phonebook-actions';\n\nconst items = createReducer([], {\n  [fetchContactSuccess]: (_, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\n\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nconst loading = createReducer(false, {\n  [fetchContactRequest]: () => true,\n  [fetchContactSuccess]: () => false,\n  [fetchContactError]: () => false,\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n});\n\nconst error = createReducer(null, {\n  [fetchContactError]: (_, { payload }) => payload,\n  [addContactError]: (_, { payload }) => payload,\n  [deleteContactError]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n  loading,\n  error,\n});\n","import { configureStore } from '@reduxjs/toolkit';\nimport {\n  // persistStore,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n\nimport logger from 'redux-logger';\n\nimport contactsReducer from './phonebook/phonebook-reducer';\n\nconst middleware = getDefaultMiddleware =>\n  getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }).concat(logger);\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\n// const persistor = persistStore(store);\n\nexport { store };\n","import { createSelector } from '@reduxjs/toolkit';\n\nconst getFilter = state => state.contacts.filter;\n\nconst getAllContacts = state => state.contacts.items;\n\nconst getVisibleContacts = createSelector(\n  [getAllContacts, getFilter],\n  (allContacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return allContacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n\nexport { getAllContacts, getFilter, getVisibleContacts };\n","import axios from 'axios';\nimport {\n  fetchContactRequest,\n  fetchContactSuccess,\n  fetchContactError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n} from '../phonebook/phonebook-actions';\n\naxios.defaults.baseURL = 'https://61cb04f2194ffe0017788aec.mockapi.io/api/v1/';\n\nconst fetchContacts = () => async dispatch => {\n  dispatch(fetchContactRequest());\n\n  try {\n    const { data } = await axios.get('/contacts');\n    dispatch(fetchContactSuccess(data));\n  } catch (error) {\n    dispatch(fetchContactError(error));\n  }\n};\n\nconst addContact = text => async dispatch => {\n  dispatch(addContactRequest());\n\n  try {\n    const { data } = await axios.post('/contacts', text);\n    dispatch(addContactSuccess(data));\n  } catch (error) {\n    dispatch(addContactError(error));\n  }\n};\n\nconst deleteContact = contactId => async dispatch => {\n  dispatch(deleteContactRequest());\n\n  try {\n    await axios.delete(`/contacts/${contactId}`);\n    dispatch(deleteContactSuccess(contactId));\n  } catch (error) {\n    dispatch(deleteContactError(error));\n  }\n};\n\nexport { addContact, deleteContact, fetchContacts };\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getAllContacts } from '../../redux/phonebook/phonebook-selectors';\nimport { addContact } from '../../redux/phonebook/phonebook-operations';\n\nfunction ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  ///////////////////\n  const contacts = useSelector(getAllContacts);\n  const dispatch = useDispatch();\n  ///////////////////\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    if (name === 'name') {\n      setName(value);\n    } else if (name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  const handleOnSubmit = e => {\n    e.preventDefault();\n    const nameInContact = name.toLowerCase().trim();\n    const isInContact = contacts.find(\n      cont => cont.name.toLowerCase().trim() === nameInContact,\n    );\n    if (isInContact) {\n      alert(`${name} is already in contact`);\n      return;\n    }\n    dispatch(addContact({ name, number }));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div className=\"inner_form\">\n      <form className=\"form\" onSubmit={handleOnSubmit}>\n        <label htmlFor=\"name\">Name</label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={name}\n          onChange={handleChange}\n        />\n\n        <label htmlFor=\"number\">Number</label>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          value={number}\n          onChange={handleChange}\n        />\n\n        <button className=\"btn_form\" type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default ContactForm;\n","import PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport {\n  deleteContact,\n  fetchContacts,\n} from '../../redux/phonebook/phonebook-operations';\nimport { getVisibleContacts } from '../../redux/phonebook/phonebook-selectors';\n\nconst ContactList = ({ contacts, handleClick, fetchContacts }) => {\n  useEffect(() => {\n    fetchContacts();\n  }, [fetchContacts]);\n\n  return (\n    <ul className=\"contact_list\">\n      {contacts.map(({ id, name, number }) => (\n        <li key={id} className=\"contact_list_item\">\n          <p className=\"contact_name\">\n            {name}: {number}\n          </p>\n          <button\n            className=\"contact_btn\"\n            type=\"button\"\n            onClick={() => handleClick(id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nconst mapStateToProps = state => ({\n  contacts: getVisibleContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  handleClick: id => dispatch(deleteContact(id)),\n  fetchContacts: () => dispatch(fetchContacts()),\n});\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string.isRequired)),\n  handleClick: PropTypes.func.isRequired,\n  fetchContacts: PropTypes.func,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { changeFilter } from '../../redux/phonebook/phonebook-actions';\nimport { getFilter } from '../../redux/phonebook/phonebook-selectors';\n\nconst Filter = ({ value, onChange }) => (\n  <div>\n    <label htmlFor=\"filter\">Find contacts by name</label>\n    <input\n      type=\"text\"\n      name=\"name\"\n      pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n      title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n      required\n      value={value}\n      onChange={onChange}\n    />\n  </div>\n);\n\nconst mapStateToProps = state => ({\n  value: getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(changeFilter(e.target.value)),\n});\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\n\nfunction App() {\n  return (\n    <div className=\"phonebook\">\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n\n      <ContactList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport { store } from './redux/store';\nimport './index.css';\nimport 'modern-normalize/modern-normalize.css';\nimport App from './App';\n\nconsole.log(store.getState());\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}